image: ubuntu:18.04

cache:
  paths: 
    - ansible-playbooks/

before_script:
    - export DEBIAN_FRONTEND=readline
    - export RUNLEVEL=1
    - apt-get update
    - apt-get install -y bash python apt-transport-https ca-certificates curl software-properties-common
    - apt-add-repository --yes --update ppa:ansible/ansible 
    - printf "#!/bin/sh\nexit 0" > /usr/sbin/policy-rc.d 
    - apt-get -y install ansible git ssh python-apt

stages:
  - build
  - lint
  - deploy
  - lifecycle

build:
  stage: build
  tags: 
  - docker-executor
  script:
  - rm -rf ansible-playbooks
  - git clone https://github.com/ska-telescope/ansible-playbooks.git
  - cd ansible-playbooks
  - echo -e "\n\n[integration]" >> hosts
  - echo "$ENVIRONMENT_ADDRESS ansible_user=$ENVIRONMENT_USER" >> hosts
  - cat hosts
  
lint:
  stage: lint
  tags:
  - docker-executor
  allow_failure: true
  script:
  - cd ansible-playbooks
  - ansible-playbook helm-linting.yml --extra-vars "throw_errors='yes' install_helm='yes' multiple_charts='yes' directory='../charts'"
  - export ANSIBLE_STDOUT_CALLBACK=json
  - ansible-playbook helm-linting.yml --extra-vars "throw_errors='yes' install_helm='no' multiple_charts='yes' directory='../charts'" >> helm-linting-results.json

deploy:
  stage: deploy
  tags:
  - docker-executor
  script:  
  - cd ansible-playbooks
  - mkdir -p /root/.ssh
  - echo "$CONTAINER_PRIVATE_KEY" >> /root/.ssh/id_rsa
  - echo "$CONTAINER_PUBLIC_KEY" >> /root/.ssh/id_rsa.pub
  - chmod 400 /root/.ssh/id_rsa /root/.ssh/id_rsa.pub
  - ssh -o StrictHostKeyChecking=no $ENVIRONMENT_USER@$ENVIRONMENT_ADDRESS date
  - ansible-playbook -vvv -i hosts -u $ENVIRONMENT_USER deploy_integrationenv.yml --extra-vars "helm_lint='no' throw_errors='no'"

stop_system:
  stage: lifecycle 
  tags:
  - docker-executor
  script: 
  - cd ansible-playbooks
  - mkdir -p /root/.ssh
  - echo "$CONTAINER_PRIVATE_KEY" >> /root/.ssh/id_rsa
  - echo "$CONTAINER_PUBLIC_KEY" >> /root/.ssh/id_rsa.pub
  - chmod 400 /root/.ssh/id_rsa /root/.ssh/id_rsa.pub
  - ssh -o StrictHostKeyChecking=no $ENVIRONMENT_USER@$ENVIRONMENT_ADDRESS date
  - ansible-playbook -vvv -i hosts -u $ENVIRONMENT_USER deploy_integrationenv.yml --extra-vars "deploy='no' stop_integrated_system='yes' install_ska_docker='no'"
  when: manual

start_system:
  stage: lifecycle 
  tags:
  - docker-executor
  script: 
  - cd ansible-playbooks
  - mkdir -p /root/.ssh
  - echo "$CONTAINER_PRIVATE_KEY" >> /root/.ssh/id_rsa
  - echo "$CONTAINER_PUBLIC_KEY" >> /root/.ssh/id_rsa.pub
  - chmod 400 /root/.ssh/id_rsa /root/.ssh/id_rsa.pub
  - ssh -o StrictHostKeyChecking=no $ENVIRONMENT_USER@$ENVIRONMENT_ADDRESS date
  - ansible-playbook -vvv -i hosts -u $ENVIRONMENT_USER deploy_integrationenv.yml --extra-vars "helm_lint='no' deploy='no' start_integrated_system='yes' install_ska_docker='no'"
  when: manual

logs:
  stage: lifecycle 
  tags:
  - docker-executor
  script: 
  - cd ansible-playbooks
  - mkdir -p /root/.ssh
  - echo "$CONTAINER_PRIVATE_KEY" >> /root/.ssh/id_rsa
  - echo "$CONTAINER_PUBLIC_KEY" >> /root/.ssh/id_rsa.pub
  - chmod 400 /root/.ssh/id_rsa /root/.ssh/id_rsa.pub
  - ssh -o StrictHostKeyChecking=no $ENVIRONMENT_USER@$ENVIRONMENT_ADDRESS date
  - ansible-playbook -vvv -i hosts -u $ENVIRONMENT_USER deploy_integrationenv.yml --extra-vars "deploy='no'  start_integrated_system='no' logs='yes' install_ska_docker='no'"
  when: manual

remove_cluster:
  stage: lifecycle
  tags:
  - docker-executor
  script: 
  - cd ansible-playbooks
  - mkdir -p /root/.ssh
  - echo "$CONTAINER_PRIVATE_KEY" >> /root/.ssh/id_rsa
  - echo "$CONTAINER_PUBLIC_KEY" >> /root/.ssh/id_rsa.pub
  - chmod 400 /root/.ssh/id_rsa /root/.ssh/id_rsa.pub
  - ssh -o StrictHostKeyChecking=no $ENVIRONMENT_USER@$ENVIRONMENT_ADDRESS date
  - ansible-playbook -vvv -i hosts -u $ENVIRONMENT_USER deploy_integrationenv.yml --extra-vars "deploy='no' remove_cluster='yes' start_integrated_system='no' install_ska_docker='no'"
  when: manual
