image: nexus.engageska-portugal.pt/ska-docker/deploy:0.4.3

variables:
  MINIKUBE: "false"
  VALUES: "pipeline.yaml"

stages:
  - clean
  - test
  - post_test
  - debug
  - publish
  - release
  - clean_staging
  - deploy_staging

.uninstall_template: &uninstall_definition
  tags:
  - k8srunner
  script:
  - &uninstall_scripts |
    echo "Uninstall_template being executed"
    echo "DELETE == "true" (so someone means business)
  only:
    refs:
      - master
    variables:
      - $DELETE == "true"

.uninstall_template_after_script: &uninstall_definition_after_script
  after_script:
  - *uninstall_scripts

uninstall mid:
  stage: clean
  variables:
    HELM_RELEASE: "test-mid"
    KUBE_NAMESPACE: "integration-mid"
    KUBE_NAMESPACE_SDP: "integration-mid-sdp"
    DEPLOYMENT_CONFIGURATION: "skamid"
  <<: *uninstall_definition
  environment:
    name: "test"
  after_script:
    - echo "Just uninstalled MID"

uninstall low:
  stage: clean
  variables:
    HELM_RELEASE: "test-low"
    KUBE_NAMESPACE: "integration-low"
    KUBE_NAMESPACE_SDP: "integration-low-sdp"
    DEPLOYMENT_CONFIGURATION: "skalow"
  <<: *uninstall_definition
  environment:
    name: "test-low"
  after_script:
    - echo "Just uninstalled LOW"

.test_template: &test_definition
  tags:
  - k8srunner
  script:
  - echo "Test Template Definition"
  # artifacts:
  #   name: "$CI_PROJECT_NAME-$CI_JOB_ID"
  #   paths:
  #     - "build/"
  #   reports:
  #     junit: build/report.xml
    when: always

test mid:
  stage: test
  variables:
    HELM_RELEASE: "test-mid"
    KUBE_NAMESPACE: "integration-mid"
    KUBE_NAMESPACE_SDP: "integration-mid-sdp"
    DEPLOYMENT_CONFIGURATION: "skamid"
    INGRESS_HOST: "mid.integration.engageska-portugal.pt"
    MARK: "skamid or common"
  <<: *test_definition
  environment:
    name: "test"
    url: "http://mid.integration.engageska-portugal.pt/testdb"
    kubernetes:
      namespace: $KUBE_NAMESPACE
  only:
    refs:
      - master
  after_script:
    - echo "Just tested MID"

test mid on demand:
  stage: test
  variables:
    DEPLOYMENT_CONFIGURATION: "skamid"
    MARK: "skamid or common"
    HELM_RELEASE: "test-mid-$CI_COMMIT_SHORT_SHA"
    TANGO_DATABASE_DS: "databaseds-tango-base-test-$CI_COMMIT_SHORT_SHA"
    KUBE_NAMESPACE: "ci-test-mid-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
    KUBE_NAMESPACE_SDP: "ci-test-mid-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-sdp"
    INGRESS_HOST: "ci-test-mid-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA.integration.engageska-portugal.pt"
  before_script:
    - echo "About to test MID on demand"
  <<: *test_definition
  <<: *uninstall_definition_after_script
  environment:
    name: "test"
    url: "http://ci-test-mid-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA.integration.engageska-portugal.pt/testdb"
    kubernetes:
      namespace: "ci-test-mid-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
  when: manual
  only:
    refs:
      - branches


tag_commit:
  stage: release
  tags:
    - k8srunner
  when:
    manual
  needs:
    - job: publish-chart
  only:
    refs:
      - master
  script:
    # - echo $GITLAB_USER_EMAIL
    - make create-publish-tag USERNAME=$GITLAB_USER_NAME EMAILID=$GITLAB_USER_EMAIL # Publish tag on gitlab

#
# variables:
#   CHARTS_TO_PUBLISH: tea

include:
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm_publish.yml'

  # Create Gitlab CI badges from CI metrics
  # https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/post_step.yml'
