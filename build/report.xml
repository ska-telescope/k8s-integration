<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="8" hostname="test-runner-tests-test" name="pytest" skipped="2" tests="19" time="39.606" timestamp="2020-01-09T16:13:01.649464"><testcase classname="tests.test_5_bdd_concept" file=".eggs/pytest_bdd-3.2.1-py3.7.egg/pytest_bdd/scenario.py" line="224" name="test_tango_setup" time="0.530"></testcase><testcase classname="tests.test_1_devices" file="tests/test_1_devices.py" line="8" name="test_init" time="0.001"><system-out>Init test devices
</system-out></testcase><testcase classname="tests.test_1_devices" file="tests/test_1_devices.py" line="11" name="test_devices" time="0.283"><system-out>Connecting to &apos;ska_mid/tm_alarmhandler/tmalarmhandler&apos;...

Connecting to &apos;mid_csp_cbf/sub_elt/master&apos;...

Connecting to &apos;mid_csp_cbf/sub_elt/subarray_01&apos;...

Connecting to &apos;mid_csp_cbf/sw1/01&apos;...

Connecting to &apos;mid_csp_cbf/sw2/01&apos;...

Connecting to &apos;mid_csp_cbf/sub_elt/subarray_02&apos;...

Connecting to &apos;mid_csp_cbf/sw1/02&apos;...

Connecting to &apos;mid_csp_cbf/sw2/02&apos;...

Connecting to &apos;mid_csp_cbf/sub_elt/subarray_03&apos;...

Connecting to &apos;mid_csp_cbf/sw1/03&apos;...

Connecting to &apos;mid_csp_cbf/sw2/03&apos;...

Connecting to &apos;ska_mid/tm_central/central_node&apos;...

Connecting to &apos;mid_csp/elt/master&apos;...

Connecting to &apos;ska_mid/tm_leaf_node/csp_master&apos;...

Connecting to &apos;mid_csp/elt/subarray_01&apos;...

Connecting to &apos;mid_csp/elt/subarray_02&apos;...

Connecting to &apos;mid_csp/elt/subarray_03&apos;...

Connecting to &apos;ska_mid/tm_leaf_node/csp_subarray01&apos;...

Connecting to &apos;ska_mid/tm_leaf_node/csp_subarray02&apos;...

Connecting to &apos;ska_mid/tm_leaf_node/csp_subarray03&apos;...

Connecting to &apos;mid_csp/elt/telstate&apos;...

Connecting to &apos;sys/database/2&apos;...

Connecting to &apos;ska_mid/tm_leaf_node/d0001&apos;...

Connecting to &apos;ska_mid/tm_leaf_node/d0002&apos;...

Connecting to &apos;ska_mid/tm_leaf_node/d0003&apos;...

Connecting to &apos;ska_mid/tm_leaf_node/d0004&apos;...

Connecting to &apos;mid_d0001/elt/master&apos;...

Connecting to &apos;mid_d0002/elt/master&apos;...

Connecting to &apos;mid_d0003/elt/master&apos;...

Connecting to &apos;mid_d0004/elt/master&apos;...

Connecting to &apos;mid_csp_cbf/fsp/01&apos;...

Connecting to &apos;mid_csp_cbf/fspSubarray/01_01&apos;...

Connecting to &apos;mid_csp_cbf/fspSubarray/01_02&apos;...

Connecting to &apos;mid_csp_cbf/fspSubarray/01_03&apos;...

Connecting to &apos;mid_csp_cbf/fsp_corr/01&apos;...

Connecting to &apos;mid_csp_cbf/fsp_pss/01&apos;...

Connecting to &apos;mid_csp_cbf/fsp_pst/01&apos;...

Connecting to &apos;mid_csp_cbf/fsp_vlbi/01&apos;...

Connecting to &apos;mid_csp_cbf/fsp/02&apos;...

Connecting to &apos;mid_csp_cbf/fspSubarray/02_01&apos;...

Connecting to &apos;mid_csp_cbf/fspSubarray/02_02&apos;...

Connecting to &apos;mid_csp_cbf/fspSubarray/02_03&apos;...

Connecting to &apos;mid_csp_cbf/fsp_corr/02&apos;...

Connecting to &apos;mid_csp_cbf/fsp_pss/02&apos;...

Connecting to &apos;mid_csp_cbf/fsp_pst/02&apos;...

Connecting to &apos;mid_csp_cbf/fsp_vlbi/02&apos;...

Connecting to &apos;mid_csp_cbf/fsp/03&apos;...

Connecting to &apos;mid_csp_cbf/fspSubarray/03_01&apos;...

Connecting to &apos;mid_csp_cbf/fspSubarray/03_02&apos;...

Connecting to &apos;mid_csp_cbf/fspSubarray/03_03&apos;...

Connecting to &apos;mid_csp_cbf/fsp_corr/03&apos;...

Connecting to &apos;mid_csp_cbf/fsp_pss/03&apos;...

Connecting to &apos;mid_csp_cbf/fsp_pst/03&apos;...

Connecting to &apos;mid_csp_cbf/fsp_vlbi/03&apos;...

Connecting to &apos;mid_csp_cbf/fsp/04&apos;...

Connecting to &apos;mid_csp_cbf/fspSubarray/04_01&apos;...

Connecting to &apos;mid_csp_cbf/fspSubarray/04_02&apos;...

Connecting to &apos;mid_csp_cbf/fspSubarray/04_03&apos;...

Connecting to &apos;mid_csp_cbf/fsp_corr/04&apos;...

Connecting to &apos;mid_csp_cbf/fsp_pss/04&apos;...

Connecting to &apos;mid_csp_cbf/fsp_pst/04&apos;...

Connecting to &apos;mid_csp_cbf/fsp_vlbi/04&apos;...

Connecting to &apos;archiving/hdbpp/confmanager01&apos;...

Connecting to &apos;archiving/hdbpp/eventsubscriber01&apos;...

Connecting to &apos;mid_sdp/elt/master&apos;...

Connecting to &apos;ska_mid/tm_leaf_node/sdp_master&apos;...

Connecting to &apos;mid_sdp/elt/subarray_1&apos;...

Connecting to &apos;mid_sdp/elt/subarray_2&apos;...

Connecting to &apos;mid_sdp/elt/subarray_3&apos;...

Connecting to &apos;ska_mid/tm_leaf_node/sdp_subarray01&apos;...

Connecting to &apos;ska_mid/tm_leaf_node/sdp_subarray02&apos;...

Connecting to &apos;ska_mid/tm_leaf_node/sdp_subarray03&apos;...

Connecting to &apos;ska_mid/tm_subarray_node/1&apos;...

Connecting to &apos;ska_mid/tm_subarray_node/2&apos;...

Connecting to &apos;ska_mid/tm_subarray_node/3&apos;...

Connecting to &apos;sys/access_control/1&apos;...

Connecting to &apos;sys/rest/0&apos;...

Connecting to &apos;sys/tg_test/1&apos;...

Connecting to &apos;mid_csp_cbf/vcc/001&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band12/001&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band3/001&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band4/001&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band5/001&apos;...

Connecting to &apos;mid_csp_cbf/vcc_sw1/001&apos;...

Connecting to &apos;mid_csp_cbf/vcc_sw2/001&apos;...

Connecting to &apos;mid_csp_cbf/vcc/002&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band12/002&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band3/002&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band4/002&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band5/002&apos;...

Connecting to &apos;mid_csp_cbf/vcc_sw1/002&apos;...

Connecting to &apos;mid_csp_cbf/vcc_sw2/002&apos;...

Connecting to &apos;mid_csp_cbf/vcc/003&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band12/003&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band3/003&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band4/003&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band5/003&apos;...

Connecting to &apos;mid_csp_cbf/vcc_sw1/003&apos;...

Connecting to &apos;mid_csp_cbf/vcc_sw2/003&apos;...

Connecting to &apos;mid_csp_cbf/vcc/004&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band12/004&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band3/004&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band4/004&apos;...

Connecting to &apos;mid_csp_cbf/vcc_band5/004&apos;...

Connecting to &apos;mid_csp_cbf/vcc_sw1/004&apos;...

Connecting to &apos;mid_csp_cbf/vcc_sw2/004&apos;...

Total number of active devices 106.
</system-out></testcase><testcase classname="tests.test_2_start-up-telescope" file="tests/test_2_start-up-telescope.py" line="10" name="test_init" time="0.002"><system-out>Init start-up-telescope
</system-out></testcase><testcase classname="tests.test_2_start-up-telescope" file="tests/test_2_start-up-telescope.py" line="13" name="test_start_up_telescope" time="6.125"><failure message="assert False == True
  -False
  +True">run_context = RunContext(HELM_RELEASE=&apos;test&apos;, KUBE_NAMESPACE=&apos;integration&apos;, TANGO_HOST=&apos;databaseds-tango-base-test:10000&apos;)

    def test_start_up_telescope(run_context):
      jsonLogin={&quot;username&quot;:&quot;user1&quot;,&quot;password&quot;:&quot;abc123&quot;}
      url = &apos;http://webjive-webjive-{}:8080/login&apos;.format(run_context.HELM_RELEASE)
      r = requests.post(url=url, json=jsonLogin)
      webjive_jwt = r.cookies.get_dict()[&apos;webjive_jwt&apos;]
    
      cookies = {&apos;webjive_jwt&apos;: webjive_jwt}
    
      url = &apos;http://webjive-webjive-{}:5004/db&apos;.format(run_context.HELM_RELEASE)
      with open(&apos;files/mutation.json&apos;, &apos;r&apos;) as file:
        mutation = file.read().replace(&apos;\n&apos;, &apos;&apos;)
    
      jsonMutation = json.loads(mutation)
      r = requests.post(url=url, json=jsonMutation, cookies=cookies)
      #print(r.text)
      parsed = json.loads(r.text)
      print(json.dumps(parsed, indent=4, sort_keys=True))
&gt;     assert parsed[&apos;data&apos;][&apos;executeCommand&apos;][&apos;ok&apos;] == True
E     assert False == True
E       -False
E       +True

tests/test_2_start-up-telescope.py:31: AssertionError</failure><system-out>{
    &quot;data&quot;: {
        &quot;executeCommand&quot;: {
            &quot;message&quot;: [
                &quot;TRANSIENT CORBA system exception: TRANSIENT_CallTimedout&quot;,
                &quot;API_CorbaException&quot;
            ],
            &quot;ok&quot;: false,
            &quot;output&quot;: null
        }
    }
}
</system-out></testcase><testcase classname="tests.test_3_logging_stack_is_nominal" file="tests/test_3_logging_stack_is_nominal.py" line="31" name="test_elasticsearch_is_receiving_requests_via_configured_ingress" time="0.001"><skipped message="Unblock CI pipeline" type="pytest.skip">tests/test_3_logging_stack_is_nominal.py:31: Unblock CI pipeline</skipped></testcase><testcase classname="tests.test_3_logging_stack_is_nominal" file="tests/test_3_logging_stack_is_nominal.py" line="49" name="test_kibana_should_be_accessible_via_ingress" time="0.001"><skipped message="Unblock pipeline for now." type="pytest.skip">tests/test_3_logging_stack_is_nominal.py:49: Unblock pipeline for now.</skipped></testcase><testcase classname="tests.test_3_logging_stack_is_nominal" file="tests/test_3_logging_stack_is_nominal.py" line="59" name="test_tmc_proto_logs_into_elasticsearch" time="0.850"></testcase><testcase classname="tests.test_4_archiver" file="tests/test_4_archiver.py" line="7" name="test_init" time="0.001"><system-out>Init test archiver
</system-out></testcase><testcase classname="tests.test_4_archiver" file="tests/test_4_archiver.py" line="10" name="test_archiver" time="4.019"><failure message="PyTango.CommunicationFailed: DevFailed[
DevError[
    desc = TRANSIENT CORBA system exception: TRANSIENT_CallTimedout
  origin = DeviceProxy:write_attribute()
  reason = API_CorbaException
severity = ERR]

DevError[
    desc = Timeout (3000 mS) exceeded on device archiving/hdbpp/confmanager01
  origin = DeviceProxy:write_attribute()
  reason = API_DeviceTimedOut
severity = ERR]
]">def test_archiver():
      evt_subscriber_device_fqdn = &quot;archiving/hdbpp/eventsubscriber01&quot;
      config_manager_device_fqdn = &quot;archiving/hdbpp/confmanager01&quot;
      conf_manager_proxy = DeviceProxy(config_manager_device_fqdn)
      evt_subscriber_device_proxy = DeviceProxy(evt_subscriber_device_fqdn)
      attribute = &quot;mid_d0001/elt/master/WindSpeed&quot;
      sleep(1)
    
      # SetAttributeName
&gt;     conf_manager_proxy.write_attribute(&quot;SetAttributeName&quot;, attribute)

tests/test_4_archiver.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/venv/lib/python3.7/site-packages/tango/green.py:195: in greener
    return executor.run(fn, args, kwargs, wait=wait, timeout=timeout)
/venv/lib/python3.7/site-packages/tango/green.py:109: in run
    return fn(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = HdbConfigurationManager(archiving/hdbpp/confmanager01)
args = (&apos;SetAttributeName&apos;, &apos;mid_d0001/elt/master/WindSpeed&apos;), kwargs = {}

    def __DeviceProxy__write_attribute(self, *args, **kwargs):
&gt;       return self._write_attribute(*args, **kwargs)
E       PyTango.CommunicationFailed: DevFailed[
E       DevError[
E           desc = TRANSIENT CORBA system exception: TRANSIENT_CallTimedout
E         origin = DeviceProxy:write_attribute()
E         reason = API_CorbaException
E       severity = ERR]
E       
E       DevError[
E           desc = Timeout (3000 mS) exceeded on device archiving/hdbpp/confmanager01
E         origin = DeviceProxy:write_attribute()
E         reason = API_DeviceTimedOut
E       severity = ERR]
E       ]

/venv/lib/python3.7/site-packages/tango/device_proxy.py:1493: CommunicationFailed</failure></testcase><testcase classname="tests.test_5_logging_namespace" file="tests/test_5_logging_namespace.py" line="4" name="test_logging_namespace" time="0.021"></testcase><testcase classname="tests.test_6_multisubarray" file="tests/test_6_multisubarray.py" line="3" name="test_init" time="0.002"><system-out>Init test multisubarray
</system-out></testcase><testcase classname="tests.test_6_multisubarray" file="tests/test_6_multisubarray.py" line="7" name="test_assignresources_sub1" time="3.038"><failure message="PyTango.CommunicationFailed: DevFailed[
DevError[
    desc = TRANSIENT CORBA system exception: TRANSIENT_CallTimedout
  origin = Connection::command_inout()
  reason = API_CorbaException
severity = ERR]

DevError[
    desc = Timeout (3000 mS) exceeded on device ska_mid/tm_central/central_node, command AssignResources
  origin = Connection::command_inout()
  reason = API_DeviceTimedOut
severity = ERR]
]">create_centralnode_proxy = CentralNode(ska_mid/tm_central/central_node)
create_subarray1_proxy = SubarrayNode(ska_mid/tm_subarray_node/1)

    def test_assignresources_sub1(create_centralnode_proxy, create_subarray1_proxy):
        test_input = &apos;{&quot;subarrayID&quot;:1,&quot;dish&quot;:{&quot;receptorIDList&quot;:[&quot;0001&quot;]}}&apos;
&gt;       create_centralnode_proxy.AssignResources(test_input)

tests/test_6_multisubarray.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/venv/lib/python3.7/site-packages/tango/device_proxy.py:243: in f
    return dp.command_inout(name, *args, **kwds)
/venv/lib/python3.7/site-packages/tango/green.py:195: in greener
    return executor.run(fn, args, kwargs, wait=wait, timeout=timeout)
/venv/lib/python3.7/site-packages/tango/green.py:109: in run
    return fn(*args, **kwargs)
/venv/lib/python3.7/site-packages/tango/connection.py:108: in __Connection__command_inout
    r = Connection.command_inout_raw(self, name, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = CentralNode(ska_mid/tm_central/central_node)
cmd_name = &apos;AssignResources&apos;
cmd_param = &apos;{&quot;subarrayID&quot;:1,&quot;dish&quot;:{&quot;receptorIDList&quot;:[&quot;0001&quot;]}}&apos;

    def __Connection__command_inout_raw(self, cmd_name, cmd_param=None):
        &quot;&quot;&quot;
        command_inout_raw( self, cmd_name, cmd_param=None) -&gt; DeviceData
    
                Execute a command on a device.
    
            Parameters :
                    - cmd_name  : (str) Command name.
                    - cmd_param : (any) It should be a value of the type expected by the
                                  command or a DeviceData object with this value inserted.
                                  It can be ommited if the command should not get any argument.
            Return     : A DeviceData object.
    
            Throws     : ConnectionFailed, CommunicationFailed, DeviceUnlocked, DevFailed from device
        &quot;&quot;&quot;
        param = __get_command_inout_param(self, cmd_name, cmd_param)
&gt;       return self.__command_inout(cmd_name, param)
E       PyTango.CommunicationFailed: DevFailed[
E       DevError[
E           desc = TRANSIENT CORBA system exception: TRANSIENT_CallTimedout
E         origin = Connection::command_inout()
E         reason = API_CorbaException
E       severity = ERR]
E       
E       DevError[
E           desc = Timeout (3000 mS) exceeded on device ska_mid/tm_central/central_node, command AssignResources
E         origin = Connection::command_inout()
E         reason = API_DeviceTimedOut
E       severity = ERR]
E       ]

/venv/lib/python3.7/site-packages/tango/connection.py:137: CommunicationFailed</failure></testcase><testcase classname="tests.test_6_multisubarray" file="tests/test_6_multisubarray.py" line="14" name="test_assignresouce_sub2" time="5.798"></testcase><testcase classname="tests.test_6_multisubarray" file="tests/test_6_multisubarray.py" line="21" name="test_assignresouce_sub3" time="3.005"><failure message="PyTango.CommunicationFailed: DevFailed[
DevError[
    desc = TRANSIENT CORBA system exception: TRANSIENT_CallTimedout
  origin = Connection::command_inout()
  reason = API_CorbaException
severity = ERR]

DevError[
    desc = Timeout (3000 mS) exceeded on device ska_mid/tm_central/central_node, command AssignResources
  origin = Connection::command_inout()
  reason = API_DeviceTimedOut
severity = ERR]
]">create_centralnode_proxy = CentralNode(ska_mid/tm_central/central_node)
create_subarray3_proxy = SubarrayNode(ska_mid/tm_subarray_node/3)

    def test_assignresouce_sub3(create_centralnode_proxy, create_subarray3_proxy):
        test_input = &apos;{&quot;subarrayID&quot;:3,&quot;dish&quot;:{&quot;receptorIDList&quot;:[&quot;0004&quot;]}}&apos;
&gt;       create_centralnode_proxy.AssignResources(test_input)

tests/test_6_multisubarray.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/venv/lib/python3.7/site-packages/tango/device_proxy.py:243: in f
    return dp.command_inout(name, *args, **kwds)
/venv/lib/python3.7/site-packages/tango/green.py:195: in greener
    return executor.run(fn, args, kwargs, wait=wait, timeout=timeout)
/venv/lib/python3.7/site-packages/tango/green.py:109: in run
    return fn(*args, **kwargs)
/venv/lib/python3.7/site-packages/tango/connection.py:108: in __Connection__command_inout
    r = Connection.command_inout_raw(self, name, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = CentralNode(ska_mid/tm_central/central_node)
cmd_name = &apos;AssignResources&apos;
cmd_param = &apos;{&quot;subarrayID&quot;:3,&quot;dish&quot;:{&quot;receptorIDList&quot;:[&quot;0004&quot;]}}&apos;

    def __Connection__command_inout_raw(self, cmd_name, cmd_param=None):
        &quot;&quot;&quot;
        command_inout_raw( self, cmd_name, cmd_param=None) -&gt; DeviceData
    
                Execute a command on a device.
    
            Parameters :
                    - cmd_name  : (str) Command name.
                    - cmd_param : (any) It should be a value of the type expected by the
                                  command or a DeviceData object with this value inserted.
                                  It can be ommited if the command should not get any argument.
            Return     : A DeviceData object.
    
            Throws     : ConnectionFailed, CommunicationFailed, DeviceUnlocked, DevFailed from device
        &quot;&quot;&quot;
        param = __get_command_inout_param(self, cmd_name, cmd_param)
&gt;       return self.__command_inout(cmd_name, param)
E       PyTango.CommunicationFailed: DevFailed[
E       DevError[
E           desc = TRANSIENT CORBA system exception: TRANSIENT_CallTimedout
E         origin = Connection::command_inout()
E         reason = API_CorbaException
E       severity = ERR]
E       
E       DevError[
E           desc = Timeout (3000 mS) exceeded on device ska_mid/tm_central/central_node, command AssignResources
E         origin = Connection::command_inout()
E         reason = API_DeviceTimedOut
E       severity = ERR]
E       ]

/venv/lib/python3.7/site-packages/tango/connection.py:137: CommunicationFailed</failure></testcase><testcase classname="tests.test_6_multisubarray" file="tests/test_6_multisubarray.py" line="28" name="test_releaseresources_sub1" time="3.008"><failure message="PyTango.CommunicationFailed: DevFailed[
DevError[
    desc = TRANSIENT CORBA system exception: TRANSIENT_CallTimedout
  origin = Connection::command_inout()
  reason = API_CorbaException
severity = ERR]

DevError[
    desc = Timeout (3000 mS) exceeded on device ska_mid/tm_central/central_node, command ReleaseResources
  origin = Connection::command_inout()
  reason = API_DeviceTimedOut
severity = ERR]
]">create_centralnode_proxy = CentralNode(ska_mid/tm_central/central_node)
create_subarray1_proxy = SubarrayNode(ska_mid/tm_subarray_node/1)

    def test_releaseresources_sub1(create_centralnode_proxy, create_subarray1_proxy):
        test_input = &apos;{&quot;subarrayID&quot;:1,&quot;releaseALL&quot;:true,&quot;receptorIDList&quot;:[]}&apos;
&gt;       retVal = json.loads(create_centralnode_proxy.ReleaseResources(test_input))

tests/test_6_multisubarray.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/venv/lib/python3.7/site-packages/tango/device_proxy.py:243: in f
    return dp.command_inout(name, *args, **kwds)
/venv/lib/python3.7/site-packages/tango/green.py:195: in greener
    return executor.run(fn, args, kwargs, wait=wait, timeout=timeout)
/venv/lib/python3.7/site-packages/tango/green.py:109: in run
    return fn(*args, **kwargs)
/venv/lib/python3.7/site-packages/tango/connection.py:108: in __Connection__command_inout
    r = Connection.command_inout_raw(self, name, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = CentralNode(ska_mid/tm_central/central_node)
cmd_name = &apos;ReleaseResources&apos;
cmd_param = &apos;{&quot;subarrayID&quot;:1,&quot;releaseALL&quot;:true,&quot;receptorIDList&quot;:[]}&apos;

    def __Connection__command_inout_raw(self, cmd_name, cmd_param=None):
        &quot;&quot;&quot;
        command_inout_raw( self, cmd_name, cmd_param=None) -&gt; DeviceData
    
                Execute a command on a device.
    
            Parameters :
                    - cmd_name  : (str) Command name.
                    - cmd_param : (any) It should be a value of the type expected by the
                                  command or a DeviceData object with this value inserted.
                                  It can be ommited if the command should not get any argument.
            Return     : A DeviceData object.
    
            Throws     : ConnectionFailed, CommunicationFailed, DeviceUnlocked, DevFailed from device
        &quot;&quot;&quot;
        param = __get_command_inout_param(self, cmd_name, cmd_param)
&gt;       return self.__command_inout(cmd_name, param)
E       PyTango.CommunicationFailed: DevFailed[
E       DevError[
E           desc = TRANSIENT CORBA system exception: TRANSIENT_CallTimedout
E         origin = Connection::command_inout()
E         reason = API_CorbaException
E       severity = ERR]
E       
E       DevError[
E           desc = Timeout (3000 mS) exceeded on device ska_mid/tm_central/central_node, command ReleaseResources
E         origin = Connection::command_inout()
E         reason = API_DeviceTimedOut
E       severity = ERR]
E       ]

/venv/lib/python3.7/site-packages/tango/connection.py:137: CommunicationFailed</failure></testcase><testcase classname="tests.test_6_multisubarray" file="tests/test_6_multisubarray.py" line="35" name="test_releaseresources_sub2" time="3.012"><failure message="PyTango.CommunicationFailed: DevFailed[
DevError[
    desc = TRANSIENT CORBA system exception: TRANSIENT_CallTimedout
  origin = Connection::command_inout()
  reason = API_CorbaException
severity = ERR]

DevError[
    desc = Timeout (3000 mS) exceeded on device ska_mid/tm_central/central_node, command ReleaseResources
  origin = Connection::command_inout()
  reason = API_DeviceTimedOut
severity = ERR]
]">create_centralnode_proxy = CentralNode(ska_mid/tm_central/central_node)
create_subarray2_proxy = SubarrayNode(ska_mid/tm_subarray_node/2)

    def test_releaseresources_sub2(create_centralnode_proxy, create_subarray2_proxy):
        test_input = &apos;{&quot;subarrayID&quot;:2,&quot;releaseALL&quot;:true,&quot;receptorIDList&quot;:[]}&apos;
&gt;       retVal = create_centralnode_proxy.ReleaseResources(test_input)

tests/test_6_multisubarray.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/venv/lib/python3.7/site-packages/tango/device_proxy.py:243: in f
    return dp.command_inout(name, *args, **kwds)
/venv/lib/python3.7/site-packages/tango/green.py:195: in greener
    return executor.run(fn, args, kwargs, wait=wait, timeout=timeout)
/venv/lib/python3.7/site-packages/tango/green.py:109: in run
    return fn(*args, **kwargs)
/venv/lib/python3.7/site-packages/tango/connection.py:108: in __Connection__command_inout
    r = Connection.command_inout_raw(self, name, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = CentralNode(ska_mid/tm_central/central_node)
cmd_name = &apos;ReleaseResources&apos;
cmd_param = &apos;{&quot;subarrayID&quot;:2,&quot;releaseALL&quot;:true,&quot;receptorIDList&quot;:[]}&apos;

    def __Connection__command_inout_raw(self, cmd_name, cmd_param=None):
        &quot;&quot;&quot;
        command_inout_raw( self, cmd_name, cmd_param=None) -&gt; DeviceData
    
                Execute a command on a device.
    
            Parameters :
                    - cmd_name  : (str) Command name.
                    - cmd_param : (any) It should be a value of the type expected by the
                                  command or a DeviceData object with this value inserted.
                                  It can be ommited if the command should not get any argument.
            Return     : A DeviceData object.
    
            Throws     : ConnectionFailed, CommunicationFailed, DeviceUnlocked, DevFailed from device
        &quot;&quot;&quot;
        param = __get_command_inout_param(self, cmd_name, cmd_param)
&gt;       return self.__command_inout(cmd_name, param)
E       PyTango.CommunicationFailed: DevFailed[
E       DevError[
E           desc = TRANSIENT CORBA system exception: TRANSIENT_CallTimedout
E         origin = Connection::command_inout()
E         reason = API_CorbaException
E       severity = ERR]
E       
E       DevError[
E           desc = Timeout (3000 mS) exceeded on device ska_mid/tm_central/central_node, command ReleaseResources
E         origin = Connection::command_inout()
E         reason = API_DeviceTimedOut
E       severity = ERR]
E       ]

/venv/lib/python3.7/site-packages/tango/connection.py:137: CommunicationFailed</failure></testcase><testcase classname="tests.test_6_multisubarray" file="tests/test_6_multisubarray.py" line="42" name="test_releaseresources_sub3" time="3.013"><failure message="PyTango.DevFailed: DevFailed[
DevError[
    desc = Error occurred while releasing resources from the Subarray 
           DevFailed[
           DevError[
               desc = TRANSIENT CORBA system exception: TRANSIENT_CallTimedout
             origin = Connection::command_inout()
             reason = API_CorbaException
           severity = ERR]
           
           DevError[
               desc = Timeout (3000 mS) exceeded on device ska_mid/tm_subarray_node/3, command ReleaseAllResources
             origin = Connection::command_inout()
             reason = API_DeviceTimedOut
           severity = ERR]
           ]
           
  origin = ReleaseResources command execution
  reason = CentralNode_CommandFailed
severity = ERR]

DevError[
    desc = Failed to execute command_inout on device ska_mid/tm_central/central_node, command ReleaseResources
  origin = Connection::command_inout()
  reason = API_CommandFailed
severity = ERR]
]">create_centralnode_proxy = CentralNode(ska_mid/tm_central/central_node)
create_subarray3_proxy = SubarrayNode(ska_mid/tm_subarray_node/3)

    def test_releaseresources_sub3(create_centralnode_proxy, create_subarray3_proxy):
        test_input = &apos;{&quot;subarrayID&quot;:3,&quot;releaseALL&quot;:true,&quot;receptorIDList&quot;:[]}&apos;
&gt;       retVal = create_centralnode_proxy.ReleaseResources(test_input)

tests/test_6_multisubarray.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/venv/lib/python3.7/site-packages/tango/device_proxy.py:243: in f
    return dp.command_inout(name, *args, **kwds)
/venv/lib/python3.7/site-packages/tango/green.py:195: in greener
    return executor.run(fn, args, kwargs, wait=wait, timeout=timeout)
/venv/lib/python3.7/site-packages/tango/green.py:109: in run
    return fn(*args, **kwargs)
/venv/lib/python3.7/site-packages/tango/connection.py:108: in __Connection__command_inout
    r = Connection.command_inout_raw(self, name, *args, **kwds)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = CentralNode(ska_mid/tm_central/central_node)
cmd_name = &apos;ReleaseResources&apos;
cmd_param = &apos;{&quot;subarrayID&quot;:3,&quot;releaseALL&quot;:true,&quot;receptorIDList&quot;:[]}&apos;

    def __Connection__command_inout_raw(self, cmd_name, cmd_param=None):
        &quot;&quot;&quot;
        command_inout_raw( self, cmd_name, cmd_param=None) -&gt; DeviceData
    
                Execute a command on a device.
    
            Parameters :
                    - cmd_name  : (str) Command name.
                    - cmd_param : (any) It should be a value of the type expected by the
                                  command or a DeviceData object with this value inserted.
                                  It can be ommited if the command should not get any argument.
            Return     : A DeviceData object.
    
            Throws     : ConnectionFailed, CommunicationFailed, DeviceUnlocked, DevFailed from device
        &quot;&quot;&quot;
        param = __get_command_inout_param(self, cmd_name, cmd_param)
&gt;       return self.__command_inout(cmd_name, param)
E       PyTango.DevFailed: DevFailed[
E       DevError[
E           desc = Error occurred while releasing resources from the Subarray 
E                  DevFailed[
E                  DevError[
E                      desc = TRANSIENT CORBA system exception: TRANSIENT_CallTimedout
E                    origin = Connection::command_inout()
E                    reason = API_CorbaException
E                  severity = ERR]
E                  
E                  DevError[
E                      desc = Timeout (3000 mS) exceeded on device ska_mid/tm_subarray_node/3, command ReleaseAllResources
E                    origin = Connection::command_inout()
E                    reason = API_DeviceTimedOut
E                  severity = ERR]
E                  ]
E                  
E         origin = ReleaseResources command execution
E         reason = CentralNode_CommandFailed
E       severity = ERR]
E       
E       DevError[
E           desc = Failed to execute command_inout on device ska_mid/tm_central/central_node, command ReleaseResources
E         origin = Connection::command_inout()
E         reason = API_CommandFailed
E       severity = ERR]
E       ]

/venv/lib/python3.7/site-packages/tango/connection.py:137: DevFailed</failure></testcase><testcase classname="tests.test_7_start_up_telescope_bdd" file="tests/test_7_start_up_telescope_bdd.py" line="40" name="test_config" time="6.093"><failure message="assert False == True
  -False
  +True">parse_config = {&apos;data&apos;: {&apos;executeCommand&apos;: {&apos;message&apos;: [&apos;TRANSIENT CORBA system exception: TRANSIENT_CallTimedout&apos;, &apos;API_CorbaException&apos;], &apos;ok&apos;: False, &apos;output&apos;: None}}}

    @then(&quot;the telescope is configured&quot;)
    def test_config(parse_config):
&gt;     assert parse_config[&apos;data&apos;][&apos;executeCommand&apos;][&apos;ok&apos;] == True
E     assert False == True
E       -False
E       +True

tests/test_7_start_up_telescope_bdd.py:43: AssertionError</failure></testcase></testsuite></testsuites>